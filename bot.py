import asyncio
from sys import exit
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
from config_reader import config
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import pandas as pd
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder


bot = Bot(token=config.bot_token.get_secret_value())
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)


class FSMInputName(StatesGroup):
    name = State()
class FSMInputName2(StatesGroup):
    name = State()

df = pd.read_csv('Price_list_Iveco_2024.csv', sep =';', encoding = "ISO-8859-1", index_col="Part Number")
dt = pd.read_csv('Price TR 2023.csv', sep =';', encoding = "ISO-8859-1", index_col="Part")
dm = pd.read_csv('–û—Å—Ç–∞—Ç–∫–∏.csv', sep =';', encoding = "1251", index_col="–ö–æ–¥")
do = pd.read_csv('–ó–∞–∫–∞–∑—ã.csv', sep =';', encoding = "1251", index_col="–ê—Ä—Ç–∏–∫—É–ª")
do_nan = do[do['–û—Å—Ç–∞–ª–æ—Å—å –æ—Ç–≥—Ä—É–∑–∏—Ç—å'].notnull()]

# def make_window():
#     messagebox.showinfo("Information-bot","The bot is running!")
    
#t1 = threading.Thread(target=make_window)

async def on_startup(bot: Bot):
    await bot.send_message( config.admin_id.get_secret_value(), text = "‚ñ∂Ô∏èBot is running")
dp.startup.register(on_startup)


async def on_shutdown(bot: Bot):
    await bot.send_message( config.admin_id.get_secret_value(), text = "üõëBot is OFF")
dp.shutdown.register(on_shutdown)

   
#######################   HELP   ################################################################


@dp.message(Command("help"))

async def refresh_handler(message: types.Message):
    
    await message.answer(f"üÜò –í —ç—Ç–æ–º –±–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:" 
                         "\n /start - –∑–∞–ø—É—Å–∫/–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"
                         "\n /find - –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É"
                        "\n /cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫ "
                         "\n /refresh - –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–µ–∂–µ–≥–æ –ø—Ä–∞–π—Å–∞ –≤—ã–ø–æ–ª–Ω–∏–≤ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –ø—Ä–∞–π—Å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω"
                         "\n /shutup - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞(—Å–Ω–∞—á–∞–ª–∞ /start –ø–æ—Ç–æ–º /shutup)"
                         "\nPS –ù–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∞–π—Å–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ—á–Ω–æ —Ç–∞–∫–∏–µ –∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .csv, –∞ –¥—Ä–æ–±–Ω–∞—è —á–∞—Å—Ç—å —Ü–µ–Ω—ã –æ—Ç–¥–µ–ª–µ–Ω–∞ —Ç–æ—á–∫–æ–π")

################################  START HANDLER ###################################################
@dp.message(Command("start"))

async def start_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = message.from_user
    user_full_name = message.from_user.full_name
    logging.info(f'{user_id} {user_full_name}')
    
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text=str("/start")))
    builder.add(types.KeyboardButton(text=str("/find")))
    builder.add(types.KeyboardButton(text=str("/help")))
    builder.adjust(3)
    do = pd.read_csv('–ó–∞–∫–∞–∑—ã.csv', sep =';', encoding = "1251", index_col="–ê—Ä—Ç–∏–∫—É–ª")
    do_nan = do[do['–û—Å—Ç–∞–ª–æ—Å—å –æ—Ç–≥—Ä—É–∑–∏—Ç—å'].notnull()]
    await message.answer(f"‚úÖ –ü—Ä–∏–≤–µ—Ç, { user_full_name } —è –±–æ—Ç, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —Ü–µ–Ω—É! \n–î–ª—è –ø–æ–∏—Å–∫–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É:\n /find - –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", reply_markup=builder.as_markup(resize_keyboard=True))
    await state.clear()

######################  REFRESH Handler   ###############################################
@dp.message(Command("refresh"))

async def refresh_handler(message: types.Message):
    global df
    global dt
    global dm
    global do
    df=df[0:0]
    dt=dt[0:0]
    dm=dm[0:0]
    do=do[0:0]
    df = pd.read_csv('Price_list_Iveco_2024.csv', sep =';', encoding = "ISO-8859-1", index_col="Part Number")
    dt = pd.read_csv('Price TR 2023.csv', sep =';', encoding = "ISO-8859-1", index_col="Part")
    dm = pd.read_csv('–û—Å—Ç–∞—Ç–∫–∏.csv', sep =';', encoding = "1251", index_col="–ö–æ–¥")
    do = pd.read_csv('–ó–∞–∫–∞–∑—ã.csv', sep =';', encoding = "1251", index_col="–ê—Ä—Ç–∏–∫—É–ª")

    await message.answer(f"Refreshed!")


################################  BOOM MODE ###################################################
@dp.message(Command("boom"))

async def start_handler_boom(message: types.Message, state: FSMContext):
    user_full_name = message.from_user.full_name
    await message.answer(f"üí£ Wow, wow, wow! \n{ user_full_name } you are in the BOOM mode! \nIf you're here, you know what's up, man. Let's get started! üòé")    
    await state.set_state(FSMInputName2.name)
    global part_gl
    global qty_do_gl
    global flag_good_do  
    global mode_flag
    mode_flag = 0 
@dp.message(FSMInputName2.name)
async def state1(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    do_nan = do[do['–û—Å—Ç–∞–ª–æ—Å—å –æ—Ç–≥—Ä—É–∑–∏—Ç—å'].notnull()]
    
    part = message.text
    global stop_flag
    stop_flag = 1
    
################# CHECKING PART IN THE MARI LIST #######################  
    try:
        if part in dm['–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å']:
            price_m = dm.at[part, '–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ —Å–∫–∏–¥–∫–æ–π ']
            ost_m = dm.at[part, '–û—Å—Ç–∞—Ç–æ–∫']
            flag_good=1 # flag that part in the list
        else:
            flag_good=0
    except KeyError:     
            await message.answer('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–π—Å–∞')

################# CHECKING PART IN THE ORDER LIST #######################  
    try:
        if part in do_nan['–û—Å—Ç–∞–ª–æ—Å—å –æ—Ç–≥—Ä—É–∑–∏—Ç—å']:
            global part_gl
            global qty_do_gl
            global flag_good_do
            qty_do_gl = do_nan.loc[part]
            flag_good_do=1 # flag that part in the list
        else:
            flag_good_do=0
    except KeyError:     
            await message.answer('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∑–∞–∫–∞–∑–æ–≤')


################# CANCEL COMMAND HANDLER ####################### 
    if part == "/cancel":
        await state.clear()
        await message.answer(f"Canceled")

################# CHECKING PART IN THE LISTS #######################
    else:
        try:
          
            if part in df['INDEX']:
                price = df.at[part, 'Price']
                if part in dt['Discr']:
                    Description = dt.at[part, 'Discr']
                else:
                    Description = 'No Description'
                    
                sebest = round(float(price)*1.2*1.38, 2)
                roznica = round(sebest*1.9,2)
                country = "üá´üá∑"
                country_name = "FR"
            else:
                price = dt.at[part, 'Price']
                Description = dt.at[part, 'Discr']
                sebest = round(float(price)*1.2*1.1, 2)
                roznica = round(sebest*1.9,2)
                country = "üáπüá∑"
                country_name = "TR"
        
##############  ERROR VALUE HANDLER   ############################
        except ValueError:
            await message.answer('‚ùå –û—à–∏–±–∫–∞! {} - –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞ –≤ –ø—Ä–∞–π—Å–µ –ª–∏–±–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω –∞—Ä—Ç–∏–∫—É–ª'.format(part))
            part_gl = 0
            
            
##############  ERROR NOT IN LIST HANDLER   ############################
        except KeyError:     
            await message.answer('‚ùå –û—à–∏–±–∫–∞! {} - –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞ –≤ –ø—Ä–∞–π—Å–µ –ª–∏–±–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω –∞—Ä—Ç–∏–∫—É–ª'.format(part))
            part_gl = 0
            
            
        else:
            if flag_good:
                global part_gl
                
                builder = InlineKeyboardBuilder()
                builder.add(types.InlineKeyboardButton(
                    text="–°–∫–æ–ª—å–∫–æ –≤ –∑–∞–∫–∞–∑–∞—Ö?",
                    callback_data="qty_in_orders"))
                                                
                await message.answer(f"üí£ {part} - {Description}\n–¶–µ–Ω–∞ –ø–æ –ø—Ä–∞–π—Å—É  - {price} EUR \
                                     \n–°–µ–±–µ—Å—Ç - {sebest} EUR —Å –ù–î–° \
                                     \n–†–æ–∑–Ω–∏—Ü–∞ - {roznica} EUR c –ù–î–° \
                                     \n–ü—Ä–∞–π—Å: {country_name}{country} \
                                     \n–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –ú–∞—Ä–∏ {ost_m}—à—Ç –¶–µ–Ω–∞: {price_m} BYN", reply_markup=builder.as_markup())
                part_gl = part
                
            else:
                builder = InlineKeyboardBuilder()
                builder.add(types.InlineKeyboardButton(
                    text="–°–∫–æ–ª—å–∫–æ –≤ –∑–∞–∫–∞–∑–∞—Ö?",
                    callback_data="qty_in_orders"))
                await message.answer(f"üí£ {part} - {Description}\n–¶–µ–Ω–∞ –ø–æ –ø—Ä–∞–π—Å—É  - {price} EUR \
                                     \n–°–µ–±–µ—Å—Ç - {sebest} EUR —Å –ù–î–° \
                                     \n–†–æ–∑–Ω–∏—Ü–∞ - {roznica} EUR c –ù–î–°\
                                     \n–ü—Ä–∞–π—Å: {country_name}{country} \
                                     \nüö´–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏ –Ω–∞ –ú–ê–†–ò", reply_markup=builder.as_markup())
                part_gl = part
                
                
@dp.callback_query(F.data == "qty_in_orders")
async def qty_in_orders(callback: types.CallbackQuery):
    global part_gl
    global qty_do_gl
    global flag_good_do
    global mode_flag
    
    if part_gl!=0 and flag_good_do==1:
        if mode_flag == 1:
            await callback.message.answer(str(qty_do_gl[['–û—Å—Ç–∞–ª–æ—Å—å –æ—Ç–≥—Ä—É–∑–∏—Ç—å', '–î–∞—Ç–∞']]))
            part_gl=0
        else:
            await callback.message.answer(str(qty_do_gl[['–û—Å—Ç–∞–ª–æ—Å—å –æ—Ç–≥—Ä—É–∑–∏—Ç—å', '–î–∞—Ç–∞', '–ü–æ—Å—Ç–∞–≤—â–∏–∫']]))
            part_gl=0
    elif flag_good_do==0:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞! - —Ç–∞–∫–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞ –Ω–µ—Ç –≤ –∑–∞–∫–∞–∑–∞—Ö")
        flag_good_do=2
    else: 
        return

################################  REGULAR MODE ###################################################
@dp.message(Command("find"))

async def start_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = message.from_user
    user_full_name = message.from_user.full_name
    logging.info(f'{user_id} {user_full_name}')
    global mode_flag
    mode_flag = 1
    
    await message.answer(f"üßê –í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª:") 
    await state.set_state(FSMInputName.name)
 
@dp.message(FSMInputName.name)
async def state1(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    do_nan = do[do['–û—Å—Ç–∞–ª–æ—Å—å –æ—Ç–≥—Ä—É–∑–∏—Ç—å'].notnull()]
    part = message.text
    global stop_flag
    stop_flag = 1
################# CHECKING PART IN THE ORDER LIST #######################  
    try:
        if part in do_nan['–û—Å—Ç–∞–ª–æ—Å—å –æ—Ç–≥—Ä—É–∑–∏—Ç—å']:
            global part_gl
            global qty_do_gl
            global flag_good_do
            qty_do_gl = do_nan.loc[part]
            flag_good_do=1 # flag that part in the list
        else:
            flag_good_do=0
    except KeyError:     
            await message.answer('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∑–∞–∫–∞–∑–æ–≤')

################# CANCEL COMMAND HANDLER #######################     
    if part == "/cancel":
        await state.clear()
        await message.answer(f"Canceled")

################# CHECKING PART IN THE LISTS ###################
    else:
        try:
            
            if part in df['INDEX']:
                price = df.at[part, 'Price']
                price_client = round(float(price)*1.2*1.38*1.9, 2)
                if part in dt['Discr']:
                    Description = dt.at[part, 'Discr']
                else:
                    Description = 'No Description'
                
            else:
                price = dt.at[part, 'Price']
                price_client = round(float(price)*1.2*1.1*1.9, 2)
                Description = dt.at[part, 'Discr']
                

##############  ERROR VALUE HANDLER   ############################
        except ValueError:
            await message.answer('‚ùå –û—à–∏–±–∫–∞! {} - –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞ –≤ –ø—Ä–∞–π—Å–µ –ª–∏–±–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω –∞—Ä—Ç–∏–∫—É–ª'.format(part))
            part_gl = 0
            
            
##############  ERROR NOT IN LIST HANDLER   ######################      
        except KeyError:     
            await message.answer('‚ùå –û—à–∏–±–∫–∞! {} - –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞ –≤ –ø—Ä–∞–π—Å–µ –ª–∏–±–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω –∞—Ä—Ç–∏–∫—É–ª'.format(part))
            part_gl = 0
            
           
        else:
            global part_gl
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(
                    text="–°–∫–æ–ª—å–∫–æ –≤ –∑–∞–∫–∞–∑–∞—Ö?",
                    callback_data="qty_in_orders"))
            await message.answer(f"‚úÖ {part} - {Description} \n–†–æ–∑–Ω–∏—á–Ω–∞—è —Ü–µ–Ω–∞: {price_client} EUR c –Ω–¥—Å.", reply_markup=builder.as_markup())
            part_gl = part

@dp.message(Command("shutup"))
async def shutup(message: types.Message):
        
    if stop_flag:
        await exit(0)
    else:
        return  

async def main():
    global stop_flag
    stop_flag = 0
    #t1.start()
    
    await dp.start_polling(bot)
  
if __name__ == '__main__':
    # –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
    #logging.basicConfig(level=logging.INFO)
    logging.basicConfig(level=logging.INFO, filename="bot_log.log", filemode='w',
                        format="%(asctime)s %(levelname)s %(message)s")
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('Exit')
    
